Though a CGI app is difficult to test, the "core" responses to user requests
are fairly easy to describe and test rigidly. These could for example be the
following:

SHOW
  Display a page in view mode.
NOT_FOUND
  Display a message about a page that does not exist.
SHOW_MOVED
  Display a page in view mode, with a note that a redirection has taken place.
MOVE
  Essentially rename a page from one name to another.
CANNOT_MOVE
  Display an error that the page move cannot be accomplished.
EDIT
  Display controls for modifying the already existing contents of a page.
CREATE
  Display controls for creating the contents of a page anew.
SAVE
  Commit the edited changes to a database.
MERGE
  Commit the edited changes to a database. Signal that a merge was done.
CONFLICT
  Signal the fact that two simultaneous edits interfere with each other.

Here are the most basic examples of what could then be tested using such a
wiki core, along with a mocked-up model of users and pages:

* Visit an existing page: SHOW.
* Visit a page that does not exist: NOT_FOUND.
* Visit a page that was moved to another: SHOW_MOVED.
* Move a page to $another that does not exist: MOVE.
* Move a page to a page that already exists: CANNOT_MOVE.
* Edit a page that already exists: EDIT.
* Edit a page that does not exist: CREATE.
* Save a page: SAVE.

* The same user edits the same page twice, and then saves: EDIT, EDIT, SAVE.
* Two different users edit the page and then save. The two edits concern
  non-intersecting parts of the page: EDIT, EDIT, SAVE, MERGE.
* Two different users edit the same page and then save. The two edits conflict,
  and cannot be merged: EDIT, EDIT, SAVE, CONFLICT.
